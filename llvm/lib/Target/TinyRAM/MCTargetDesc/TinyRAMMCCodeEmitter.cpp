//===-- TinyRAMMCCodeEmitter.cpp - Convert TinyRAM code to machine code --===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#include "MCTargetDesc/TinyRAMFixupKinds.h"
#include "MCTargetDesc/TinyRAMMCTargetDesc.h"
#include "llvm/ADT/SmallVector.h"
#include "llvm/MC/MCCodeEmitter.h"
#include "llvm/MC/MCContext.h"
#include "llvm/MC/MCExpr.h"
#include "llvm/MC/MCFixup.h"
#include "llvm/MC/MCInst.h"
#include "llvm/MC/MCInstrInfo.h"
#include "llvm/MC/MCRegisterInfo.h"
#include "llvm/MC/MCSubtargetInfo.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
#include <cassert>
#include <cstdint>

using namespace llvm;

#define DEBUG_TYPE "mccodeemitter"

namespace {

class TinyRAMMCCodeEmitter : public MCCodeEmitter {
  const MCInstrInfo &MCII;
  const MCRegisterInfo &MRI;
  MCContext &Ctx;

public:
  TinyRAMMCCodeEmitter(const MCInstrInfo &MCII, const MCRegisterInfo &MRI, MCContext &Ctx)
      : MCII(MCII), MRI(MRI), Ctx(Ctx) {}

  ~TinyRAMMCCodeEmitter() override = default;

  // OVerride MCCodeEmitter.
  void encodeInstruction(
      const MCInst &MI,
      raw_ostream &OS,
      SmallVectorImpl<MCFixup> &Fixups,
      const MCSubtargetInfo &STI) const override;

  // Generated by TableGen.
  uint64_t getBinaryCodeForInstr(const MCInst &MI, SmallVectorImpl<MCFixup> &Fixups, const MCSubtargetInfo &STI) const;

  // Functions called by the generated function.

  /// \brief Return the binary encoding of operand. If the machine
  /// operand requires relocation, record the relocation and return zero.
  unsigned getMachineOpValue(
      const MCInst &MI,
      const MCOperand &MO,
      SmallVectorImpl<MCFixup> &Fixups,
      const MCSubtargetInfo &STI) const;
};

} // end anonymous namespace

void TinyRAMMCCodeEmitter::encodeInstruction(
    const MCInst &MI,
    raw_ostream &OS,
    SmallVectorImpl<MCFixup> &Fixups,
    const MCSubtargetInfo &STI) const {
  uint64_t Bits = getBinaryCodeForInstr(MI, Fixups, STI);
  assert(MCII.get(MI.getOpcode()).getSize() == 8 && "Unexpected instr length");

  // Emit bytes in little-endian
  for (int I = 0; I < 8; I++) {
    OS << static_cast<uint8_t>((Bits >> (I * 8)) & 0xff);
  }
}

unsigned TinyRAMMCCodeEmitter::getMachineOpValue(
    const MCInst &MI,
    const MCOperand &MO,
    SmallVectorImpl<MCFixup> &Fixups,
    const MCSubtargetInfo &STI) const {
  if (MO.isReg())
    return MRI.getEncodingValue(MO.getReg());
  if (MO.isImm())
    return static_cast<uint64_t>(MO.getImm());

  // MCOp must be an expression
  assert(MO.isExpr());
  const MCExpr *Expr = MO.getExpr();

  // Extract the symbolic reference side of a binary expression.
  if (Expr->getKind() == MCExpr::Binary) {
    const MCBinaryExpr *BinaryExpr = static_cast<const MCBinaryExpr *>(Expr);
    Expr = BinaryExpr->getLHS();
  }

  assert(isa<MCExpr>(Expr) || Expr->getKind() == MCExpr::SymbolRef);
  // Push fixup (all info is contained within)
  Fixups.push_back(MCFixup::create(0, MO.getExpr(), MCFixupKind(TinyRAM::FIXUP_TINYRAM_32)));
  return 0;
}

#include "TinyRAMGenMCCodeEmitter.inc"

MCCodeEmitter *llvm::createTinyRAMMCCodeEmitter(const MCInstrInfo &MCII, const MCRegisterInfo &MRI, MCContext &Ctx) {
  return new TinyRAMMCCodeEmitter(MCII, MRI, Ctx);
}
