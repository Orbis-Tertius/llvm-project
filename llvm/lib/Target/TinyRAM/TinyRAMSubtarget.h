//===-- TinyRAMSubtarget.h - Define Subtarget for TinyRAM -----------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_TINYRAM_TINYRAMSUBTARGET_H
#define LLVM_LIB_TARGET_TINYRAM_TINYRAMSUBTARGET_H

#include "TinyRAMFrameLowering.h"
#include "TinyRAMISelLowering.h"
#include "TinyRAMInstrInfo.h"
#include "TinyRAMRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetFrameLowering.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include <memory>
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "TinyRAMGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class TinyRAMSubtarget : public TinyRAMGenSubtargetInfo {
  Triple TargetTriple;
  virtual void anchor();

  TinyRAMInstrInfo InstrInfo;
  std::unique_ptr<TargetLowering> TLInfo;
  TinyRAMFrameLowering FrameLowering;

public:
  TinyRAMSubtarget(const Triple &TT, const std::string &CPU, const std::string &FS, const TargetMachine &TM);

  // Automatically generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const TinyRAMInstrInfo *getInstrInfo() const override {
    return &InstrInfo;
  }
  const TinyRAMRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const TargetLowering *getTargetLowering() const override {
    return TLInfo.get();
  }
};

} // end namespace llvm

#endif
